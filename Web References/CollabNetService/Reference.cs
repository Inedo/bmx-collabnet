//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Inedo.BuildMasterExtensions.CollabNet.CollabNetService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CollabNetSoapBinding", Namespace="http://schema.open.collab.net/sfee50/soap50/service")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(Group2SoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(GroupSoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(AuditHistorySoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(AssociationSoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CommentSoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ProjectMemberSoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(UserSoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(VersionInformationSoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ProjectSoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(AttachmentSoapRow))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ObjectSoapDO))]
    public partial class CollabNetSoapService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback createGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback setUserDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback hasPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback keepAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginOperationCompleted;
        
        private System.Threading.SendOrPostCallback createUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback createProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback createProjectFromTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectAccessLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback listAttachmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback isHostedModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback listTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback addProjectMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeProjectMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVersionInformationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectsForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectListOperationCompleted;
        
        private System.Threading.SendOrPostCallback setProjectQuotaOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectQuotaOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectListForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback invalidateResourceBundleCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback invalidateEmailTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGroupDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback setGroupDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback addGroupMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeGroupMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback findUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectDiskUsageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getActiveGroupMembersOperationCompleted;
        
        private System.Threading.SendOrPostCallback logoffOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback getApiVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserProjectListOperationCompleted;
        
        private System.Threading.SendOrPostCallback findProjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectMemberListOperationCompleted;
        
        private System.Threading.SendOrPostCallback setProjectAccessLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCommentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback createAssociationOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteAssociationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAssociationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAuditHistoryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback reindexObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginAnonymousOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectGroupListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGroupList2OperationCompleted;
        
        private System.Threading.SendOrPostCallback getGroupListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserGroupListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConfigurationValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback listProjectAdminsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CollabNetSoapService() {
            this.Url = "http://localhost:8080/ce-soap50/services/CollabNet";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getVersionCompletedEventHandler getVersionCompleted;
        
        /// <remarks/>
        public event createGroupCompletedEventHandler createGroupCompleted;
        
        /// <remarks/>
        public event setUserDataCompletedEventHandler setUserDataCompleted;
        
        /// <remarks/>
        public event hasPermissionCompletedEventHandler hasPermissionCompleted;
        
        /// <remarks/>
        public event getUserDataCompletedEventHandler getUserDataCompleted;
        
        /// <remarks/>
        public event keepAliveCompletedEventHandler keepAliveCompleted;
        
        /// <remarks/>
        public event loginCompletedEventHandler loginCompleted;
        
        /// <remarks/>
        public event createUserCompletedEventHandler createUserCompleted;
        
        /// <remarks/>
        public event createProjectCompletedEventHandler createProjectCompleted;
        
        /// <remarks/>
        public event createProjectFromTemplateCompletedEventHandler createProjectFromTemplateCompleted;
        
        /// <remarks/>
        public event getProjectDataCompletedEventHandler getProjectDataCompleted;
        
        /// <remarks/>
        public event getProjectAccessLevelCompletedEventHandler getProjectAccessLevelCompleted;
        
        /// <remarks/>
        public event deleteAttachmentCompletedEventHandler deleteAttachmentCompleted;
        
        /// <remarks/>
        public event listAttachmentsCompletedEventHandler listAttachmentsCompleted;
        
        /// <remarks/>
        public event isHostedModeCompletedEventHandler isHostedModeCompleted;
        
        /// <remarks/>
        public event listTemplatesCompletedEventHandler listTemplatesCompleted;
        
        /// <remarks/>
        public event deleteProjectCompletedEventHandler deleteProjectCompleted;
        
        /// <remarks/>
        public event addProjectMemberCompletedEventHandler addProjectMemberCompleted;
        
        /// <remarks/>
        public event removeProjectMemberCompletedEventHandler removeProjectMemberCompleted;
        
        /// <remarks/>
        public event getVersionInformationListCompletedEventHandler getVersionInformationListCompleted;
        
        /// <remarks/>
        public event getProjectsForUserCompletedEventHandler getProjectsForUserCompleted;
        
        /// <remarks/>
        public event getProjectListCompletedEventHandler getProjectListCompleted;
        
        /// <remarks/>
        public event setProjectQuotaCompletedEventHandler setProjectQuotaCompleted;
        
        /// <remarks/>
        public event getProjectQuotaCompletedEventHandler getProjectQuotaCompleted;
        
        /// <remarks/>
        public event getProjectListForUserCompletedEventHandler getProjectListForUserCompleted;
        
        /// <remarks/>
        public event invalidateResourceBundleCacheCompletedEventHandler invalidateResourceBundleCacheCompleted;
        
        /// <remarks/>
        public event invalidateEmailTemplateCompletedEventHandler invalidateEmailTemplateCompleted;
        
        /// <remarks/>
        public event getGroupDataCompletedEventHandler getGroupDataCompleted;
        
        /// <remarks/>
        public event setGroupDataCompletedEventHandler setGroupDataCompleted;
        
        /// <remarks/>
        public event deleteGroupCompletedEventHandler deleteGroupCompleted;
        
        /// <remarks/>
        public event addGroupMemberCompletedEventHandler addGroupMemberCompleted;
        
        /// <remarks/>
        public event removeGroupMemberCompletedEventHandler removeGroupMemberCompleted;
        
        /// <remarks/>
        public event getUserListCompletedEventHandler getUserListCompleted;
        
        /// <remarks/>
        public event findUsersCompletedEventHandler findUsersCompleted;
        
        /// <remarks/>
        public event getProjectDiskUsageCompletedEventHandler getProjectDiskUsageCompleted;
        
        /// <remarks/>
        public event getActiveGroupMembersCompletedEventHandler getActiveGroupMembersCompleted;
        
        /// <remarks/>
        public event logoffCompletedEventHandler logoffCompleted;
        
        /// <remarks/>
        public event loginWithTokenCompletedEventHandler loginWithTokenCompleted;
        
        /// <remarks/>
        public event getApiVersionCompletedEventHandler getApiVersionCompleted;
        
        /// <remarks/>
        public event getUserProjectListCompletedEventHandler getUserProjectListCompleted;
        
        /// <remarks/>
        public event findProjectsCompletedEventHandler findProjectsCompleted;
        
        /// <remarks/>
        public event getProjectMemberListCompletedEventHandler getProjectMemberListCompleted;
        
        /// <remarks/>
        public event setProjectAccessLevelCompletedEventHandler setProjectAccessLevelCompleted;
        
        /// <remarks/>
        public event getCommentListCompletedEventHandler getCommentListCompleted;
        
        /// <remarks/>
        public event createAssociationCompletedEventHandler createAssociationCompleted;
        
        /// <remarks/>
        public event deleteAssociationCompletedEventHandler deleteAssociationCompleted;
        
        /// <remarks/>
        public event getAssociationListCompletedEventHandler getAssociationListCompleted;
        
        /// <remarks/>
        public event getAuditHistoryListCompletedEventHandler getAuditHistoryListCompleted;
        
        /// <remarks/>
        public event reindexObjectCompletedEventHandler reindexObjectCompleted;
        
        /// <remarks/>
        public event loginAnonymousCompletedEventHandler loginAnonymousCompleted;
        
        /// <remarks/>
        public event getProjectGroupListCompletedEventHandler getProjectGroupListCompleted;
        
        /// <remarks/>
        public event getGroupList2CompletedEventHandler getGroupList2Completed;
        
        /// <remarks/>
        public event getGroupListCompletedEventHandler getGroupListCompleted;
        
        /// <remarks/>
        public event getUserGroupListCompletedEventHandler getUserGroupListCompleted;
        
        /// <remarks/>
        public event getConfigurationValueCompletedEventHandler getConfigurationValueCompleted;
        
        /// <remarks/>
        public event listProjectAdminsCompletedEventHandler listProjectAdminsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getVersionReturn")]
        public string getVersion(string sessionId) {
            object[] results = this.Invoke("getVersion", new object[] {
                        sessionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getVersionAsync(string sessionId) {
            this.getVersionAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void getVersionAsync(string sessionId, object userState) {
            if ((this.getVersionOperationCompleted == null)) {
                this.getVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVersionOperationCompleted);
            }
            this.InvokeAsync("getVersion", new object[] {
                        sessionId}, this.getVersionOperationCompleted, userState);
        }
        
        private void OngetVersionOperationCompleted(object arg) {
            if ((this.getVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVersionCompleted(this, new getVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("createGroupReturn")]
        public GroupSoapDO createGroup(string sessionId, string fullName, string description) {
            object[] results = this.Invoke("createGroup", new object[] {
                        sessionId,
                        fullName,
                        description});
            return ((GroupSoapDO)(results[0]));
        }
        
        /// <remarks/>
        public void createGroupAsync(string sessionId, string fullName, string description) {
            this.createGroupAsync(sessionId, fullName, description, null);
        }
        
        /// <remarks/>
        public void createGroupAsync(string sessionId, string fullName, string description, object userState) {
            if ((this.createGroupOperationCompleted == null)) {
                this.createGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateGroupOperationCompleted);
            }
            this.InvokeAsync("createGroup", new object[] {
                        sessionId,
                        fullName,
                        description}, this.createGroupOperationCompleted, userState);
        }
        
        private void OncreateGroupOperationCompleted(object arg) {
            if ((this.createGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createGroupCompleted(this, new createGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void setUserData(string sessionId, UserSoapDO userData) {
            this.Invoke("setUserData", new object[] {
                        sessionId,
                        userData});
        }
        
        /// <remarks/>
        public void setUserDataAsync(string sessionId, UserSoapDO userData) {
            this.setUserDataAsync(sessionId, userData, null);
        }
        
        /// <remarks/>
        public void setUserDataAsync(string sessionId, UserSoapDO userData, object userState) {
            if ((this.setUserDataOperationCompleted == null)) {
                this.setUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetUserDataOperationCompleted);
            }
            this.InvokeAsync("setUserData", new object[] {
                        sessionId,
                        userData}, this.setUserDataOperationCompleted, userState);
        }
        
        private void OnsetUserDataOperationCompleted(object arg) {
            if ((this.setUserDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setUserDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("hasPermissionReturn")]
        public bool hasPermission(string sessionId, string projectId, string operationString, string objectId) {
            object[] results = this.Invoke("hasPermission", new object[] {
                        sessionId,
                        projectId,
                        operationString,
                        objectId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void hasPermissionAsync(string sessionId, string projectId, string operationString, string objectId) {
            this.hasPermissionAsync(sessionId, projectId, operationString, objectId, null);
        }
        
        /// <remarks/>
        public void hasPermissionAsync(string sessionId, string projectId, string operationString, string objectId, object userState) {
            if ((this.hasPermissionOperationCompleted == null)) {
                this.hasPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnhasPermissionOperationCompleted);
            }
            this.InvokeAsync("hasPermission", new object[] {
                        sessionId,
                        projectId,
                        operationString,
                        objectId}, this.hasPermissionOperationCompleted, userState);
        }
        
        private void OnhasPermissionOperationCompleted(object arg) {
            if ((this.hasPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.hasPermissionCompleted(this, new hasPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUserDataReturn")]
        public UserSoapDO getUserData(string sessionId, string username) {
            object[] results = this.Invoke("getUserData", new object[] {
                        sessionId,
                        username});
            return ((UserSoapDO)(results[0]));
        }
        
        /// <remarks/>
        public void getUserDataAsync(string sessionId, string username) {
            this.getUserDataAsync(sessionId, username, null);
        }
        
        /// <remarks/>
        public void getUserDataAsync(string sessionId, string username, object userState) {
            if ((this.getUserDataOperationCompleted == null)) {
                this.getUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserDataOperationCompleted);
            }
            this.InvokeAsync("getUserData", new object[] {
                        sessionId,
                        username}, this.getUserDataOperationCompleted, userState);
        }
        
        private void OngetUserDataOperationCompleted(object arg) {
            if ((this.getUserDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserDataCompleted(this, new getUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void keepAlive(string sessionId) {
            this.Invoke("keepAlive", new object[] {
                        sessionId});
        }
        
        /// <remarks/>
        public void keepAliveAsync(string sessionId) {
            this.keepAliveAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void keepAliveAsync(string sessionId, object userState) {
            if ((this.keepAliveOperationCompleted == null)) {
                this.keepAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnkeepAliveOperationCompleted);
            }
            this.InvokeAsync("keepAlive", new object[] {
                        sessionId}, this.keepAliveOperationCompleted, userState);
        }
        
        private void OnkeepAliveOperationCompleted(object arg) {
            if ((this.keepAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.keepAliveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("loginReturn")]
        public string login(string userName, string password) {
            object[] results = this.Invoke("login", new object[] {
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loginAsync(string userName, string password) {
            this.loginAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void loginAsync(string userName, string password, object userState) {
            if ((this.loginOperationCompleted == null)) {
                this.loginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginOperationCompleted);
            }
            this.InvokeAsync("login", new object[] {
                        userName,
                        password}, this.loginOperationCompleted, userState);
        }
        
        private void OnloginOperationCompleted(object arg) {
            if ((this.loginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginCompleted(this, new loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("createUserReturn")]
        public UserSoapDO createUser(string sessionId, string userName, string email, string fullName, string locale, string timeZone, bool isSuperUser, bool isRestrictedUser, string password) {
            object[] results = this.Invoke("createUser", new object[] {
                        sessionId,
                        userName,
                        email,
                        fullName,
                        locale,
                        timeZone,
                        isSuperUser,
                        isRestrictedUser,
                        password});
            return ((UserSoapDO)(results[0]));
        }
        
        /// <remarks/>
        public void createUserAsync(string sessionId, string userName, string email, string fullName, string locale, string timeZone, bool isSuperUser, bool isRestrictedUser, string password) {
            this.createUserAsync(sessionId, userName, email, fullName, locale, timeZone, isSuperUser, isRestrictedUser, password, null);
        }
        
        /// <remarks/>
        public void createUserAsync(string sessionId, string userName, string email, string fullName, string locale, string timeZone, bool isSuperUser, bool isRestrictedUser, string password, object userState) {
            if ((this.createUserOperationCompleted == null)) {
                this.createUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateUserOperationCompleted);
            }
            this.InvokeAsync("createUser", new object[] {
                        sessionId,
                        userName,
                        email,
                        fullName,
                        locale,
                        timeZone,
                        isSuperUser,
                        isRestrictedUser,
                        password}, this.createUserOperationCompleted, userState);
        }
        
        private void OncreateUserOperationCompleted(object arg) {
            if ((this.createUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createUserCompleted(this, new createUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("createProjectReturn")]
        public ProjectSoapDO createProject(string sessionId, string name, string title, string description) {
            object[] results = this.Invoke("createProject", new object[] {
                        sessionId,
                        name,
                        title,
                        description});
            return ((ProjectSoapDO)(results[0]));
        }
        
        /// <remarks/>
        public void createProjectAsync(string sessionId, string name, string title, string description) {
            this.createProjectAsync(sessionId, name, title, description, null);
        }
        
        /// <remarks/>
        public void createProjectAsync(string sessionId, string name, string title, string description, object userState) {
            if ((this.createProjectOperationCompleted == null)) {
                this.createProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateProjectOperationCompleted);
            }
            this.InvokeAsync("createProject", new object[] {
                        sessionId,
                        name,
                        title,
                        description}, this.createProjectOperationCompleted, userState);
        }
        
        private void OncreateProjectOperationCompleted(object arg) {
            if ((this.createProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createProjectCompleted(this, new createProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("createProjectFromTemplateReturn")]
        public ProjectSoapDO createProjectFromTemplate(string sessionId, string templateId, string name, string title, string description) {
            object[] results = this.Invoke("createProjectFromTemplate", new object[] {
                        sessionId,
                        templateId,
                        name,
                        title,
                        description});
            return ((ProjectSoapDO)(results[0]));
        }
        
        /// <remarks/>
        public void createProjectFromTemplateAsync(string sessionId, string templateId, string name, string title, string description) {
            this.createProjectFromTemplateAsync(sessionId, templateId, name, title, description, null);
        }
        
        /// <remarks/>
        public void createProjectFromTemplateAsync(string sessionId, string templateId, string name, string title, string description, object userState) {
            if ((this.createProjectFromTemplateOperationCompleted == null)) {
                this.createProjectFromTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateProjectFromTemplateOperationCompleted);
            }
            this.InvokeAsync("createProjectFromTemplate", new object[] {
                        sessionId,
                        templateId,
                        name,
                        title,
                        description}, this.createProjectFromTemplateOperationCompleted, userState);
        }
        
        private void OncreateProjectFromTemplateOperationCompleted(object arg) {
            if ((this.createProjectFromTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createProjectFromTemplateCompleted(this, new createProjectFromTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectDataReturn")]
        public ProjectSoapDO getProjectData(string sessionId, string projectId) {
            object[] results = this.Invoke("getProjectData", new object[] {
                        sessionId,
                        projectId});
            return ((ProjectSoapDO)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectDataAsync(string sessionId, string projectId) {
            this.getProjectDataAsync(sessionId, projectId, null);
        }
        
        /// <remarks/>
        public void getProjectDataAsync(string sessionId, string projectId, object userState) {
            if ((this.getProjectDataOperationCompleted == null)) {
                this.getProjectDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectDataOperationCompleted);
            }
            this.InvokeAsync("getProjectData", new object[] {
                        sessionId,
                        projectId}, this.getProjectDataOperationCompleted, userState);
        }
        
        private void OngetProjectDataOperationCompleted(object arg) {
            if ((this.getProjectDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectDataCompleted(this, new getProjectDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectAccessLevelReturn")]
        public int getProjectAccessLevel(string sessionId, string projectId) {
            object[] results = this.Invoke("getProjectAccessLevel", new object[] {
                        sessionId,
                        projectId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectAccessLevelAsync(string sessionId, string projectId) {
            this.getProjectAccessLevelAsync(sessionId, projectId, null);
        }
        
        /// <remarks/>
        public void getProjectAccessLevelAsync(string sessionId, string projectId, object userState) {
            if ((this.getProjectAccessLevelOperationCompleted == null)) {
                this.getProjectAccessLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectAccessLevelOperationCompleted);
            }
            this.InvokeAsync("getProjectAccessLevel", new object[] {
                        sessionId,
                        projectId}, this.getProjectAccessLevelOperationCompleted, userState);
        }
        
        private void OngetProjectAccessLevelOperationCompleted(object arg) {
            if ((this.getProjectAccessLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectAccessLevelCompleted(this, new getProjectAccessLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void deleteAttachment(string sessionId, string objectId, string attachmentId) {
            this.Invoke("deleteAttachment", new object[] {
                        sessionId,
                        objectId,
                        attachmentId});
        }
        
        /// <remarks/>
        public void deleteAttachmentAsync(string sessionId, string objectId, string attachmentId) {
            this.deleteAttachmentAsync(sessionId, objectId, attachmentId, null);
        }
        
        /// <remarks/>
        public void deleteAttachmentAsync(string sessionId, string objectId, string attachmentId, object userState) {
            if ((this.deleteAttachmentOperationCompleted == null)) {
                this.deleteAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteAttachmentOperationCompleted);
            }
            this.InvokeAsync("deleteAttachment", new object[] {
                        sessionId,
                        objectId,
                        attachmentId}, this.deleteAttachmentOperationCompleted, userState);
        }
        
        private void OndeleteAttachmentOperationCompleted(object arg) {
            if ((this.deleteAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("listAttachmentsReturn")]
        public AttachmentSoapList listAttachments(string sessionId, string objectId) {
            object[] results = this.Invoke("listAttachments", new object[] {
                        sessionId,
                        objectId});
            return ((AttachmentSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void listAttachmentsAsync(string sessionId, string objectId) {
            this.listAttachmentsAsync(sessionId, objectId, null);
        }
        
        /// <remarks/>
        public void listAttachmentsAsync(string sessionId, string objectId, object userState) {
            if ((this.listAttachmentsOperationCompleted == null)) {
                this.listAttachmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistAttachmentsOperationCompleted);
            }
            this.InvokeAsync("listAttachments", new object[] {
                        sessionId,
                        objectId}, this.listAttachmentsOperationCompleted, userState);
        }
        
        private void OnlistAttachmentsOperationCompleted(object arg) {
            if ((this.listAttachmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listAttachmentsCompleted(this, new listAttachmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("isHostedModeReturn")]
        public bool isHostedMode(string sessionId) {
            object[] results = this.Invoke("isHostedMode", new object[] {
                        sessionId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isHostedModeAsync(string sessionId) {
            this.isHostedModeAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void isHostedModeAsync(string sessionId, object userState) {
            if ((this.isHostedModeOperationCompleted == null)) {
                this.isHostedModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisHostedModeOperationCompleted);
            }
            this.InvokeAsync("isHostedMode", new object[] {
                        sessionId}, this.isHostedModeOperationCompleted, userState);
        }
        
        private void OnisHostedModeOperationCompleted(object arg) {
            if ((this.isHostedModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isHostedModeCompleted(this, new isHostedModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("listTemplatesReturn")]
        public ProjectSoapList listTemplates(string sessionId) {
            object[] results = this.Invoke("listTemplates", new object[] {
                        sessionId});
            return ((ProjectSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void listTemplatesAsync(string sessionId) {
            this.listTemplatesAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void listTemplatesAsync(string sessionId, object userState) {
            if ((this.listTemplatesOperationCompleted == null)) {
                this.listTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistTemplatesOperationCompleted);
            }
            this.InvokeAsync("listTemplates", new object[] {
                        sessionId}, this.listTemplatesOperationCompleted, userState);
        }
        
        private void OnlistTemplatesOperationCompleted(object arg) {
            if ((this.listTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listTemplatesCompleted(this, new listTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void deleteProject(string sessionId, string projectId) {
            this.Invoke("deleteProject", new object[] {
                        sessionId,
                        projectId});
        }
        
        /// <remarks/>
        public void deleteProjectAsync(string sessionId, string projectId) {
            this.deleteProjectAsync(sessionId, projectId, null);
        }
        
        /// <remarks/>
        public void deleteProjectAsync(string sessionId, string projectId, object userState) {
            if ((this.deleteProjectOperationCompleted == null)) {
                this.deleteProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteProjectOperationCompleted);
            }
            this.InvokeAsync("deleteProject", new object[] {
                        sessionId,
                        projectId}, this.deleteProjectOperationCompleted, userState);
        }
        
        private void OndeleteProjectOperationCompleted(object arg) {
            if ((this.deleteProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void addProjectMember(string sessionId, string projectId, string userName) {
            this.Invoke("addProjectMember", new object[] {
                        sessionId,
                        projectId,
                        userName});
        }
        
        /// <remarks/>
        public void addProjectMemberAsync(string sessionId, string projectId, string userName) {
            this.addProjectMemberAsync(sessionId, projectId, userName, null);
        }
        
        /// <remarks/>
        public void addProjectMemberAsync(string sessionId, string projectId, string userName, object userState) {
            if ((this.addProjectMemberOperationCompleted == null)) {
                this.addProjectMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddProjectMemberOperationCompleted);
            }
            this.InvokeAsync("addProjectMember", new object[] {
                        sessionId,
                        projectId,
                        userName}, this.addProjectMemberOperationCompleted, userState);
        }
        
        private void OnaddProjectMemberOperationCompleted(object arg) {
            if ((this.addProjectMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addProjectMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void removeProjectMember(string sessionId, string projectId, string userName) {
            this.Invoke("removeProjectMember", new object[] {
                        sessionId,
                        projectId,
                        userName});
        }
        
        /// <remarks/>
        public void removeProjectMemberAsync(string sessionId, string projectId, string userName) {
            this.removeProjectMemberAsync(sessionId, projectId, userName, null);
        }
        
        /// <remarks/>
        public void removeProjectMemberAsync(string sessionId, string projectId, string userName, object userState) {
            if ((this.removeProjectMemberOperationCompleted == null)) {
                this.removeProjectMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveProjectMemberOperationCompleted);
            }
            this.InvokeAsync("removeProjectMember", new object[] {
                        sessionId,
                        projectId,
                        userName}, this.removeProjectMemberOperationCompleted, userState);
        }
        
        private void OnremoveProjectMemberOperationCompleted(object arg) {
            if ((this.removeProjectMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeProjectMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getVersionInformationListReturn")]
        public VersionInformationSoapList getVersionInformationList(string sessionId, string folderId) {
            object[] results = this.Invoke("getVersionInformationList", new object[] {
                        sessionId,
                        folderId});
            return ((VersionInformationSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getVersionInformationListAsync(string sessionId, string folderId) {
            this.getVersionInformationListAsync(sessionId, folderId, null);
        }
        
        /// <remarks/>
        public void getVersionInformationListAsync(string sessionId, string folderId, object userState) {
            if ((this.getVersionInformationListOperationCompleted == null)) {
                this.getVersionInformationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVersionInformationListOperationCompleted);
            }
            this.InvokeAsync("getVersionInformationList", new object[] {
                        sessionId,
                        folderId}, this.getVersionInformationListOperationCompleted, userState);
        }
        
        private void OngetVersionInformationListOperationCompleted(object arg) {
            if ((this.getVersionInformationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVersionInformationListCompleted(this, new getVersionInformationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectsForUserReturn")]
        public ProjectSoapList getProjectsForUser(string sessionId, string userId) {
            object[] results = this.Invoke("getProjectsForUser", new object[] {
                        sessionId,
                        userId});
            return ((ProjectSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectsForUserAsync(string sessionId, string userId) {
            this.getProjectsForUserAsync(sessionId, userId, null);
        }
        
        /// <remarks/>
        public void getProjectsForUserAsync(string sessionId, string userId, object userState) {
            if ((this.getProjectsForUserOperationCompleted == null)) {
                this.getProjectsForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectsForUserOperationCompleted);
            }
            this.InvokeAsync("getProjectsForUser", new object[] {
                        sessionId,
                        userId}, this.getProjectsForUserOperationCompleted, userState);
        }
        
        private void OngetProjectsForUserOperationCompleted(object arg) {
            if ((this.getProjectsForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectsForUserCompleted(this, new getProjectsForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectListReturn")]
        public ProjectSoapList getProjectList(string sessionId) {
            object[] results = this.Invoke("getProjectList", new object[] {
                        sessionId});
            return ((ProjectSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectListAsync(string sessionId) {
            this.getProjectListAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void getProjectListAsync(string sessionId, object userState) {
            if ((this.getProjectListOperationCompleted == null)) {
                this.getProjectListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectListOperationCompleted);
            }
            this.InvokeAsync("getProjectList", new object[] {
                        sessionId}, this.getProjectListOperationCompleted, userState);
        }
        
        private void OngetProjectListOperationCompleted(object arg) {
            if ((this.getProjectListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectListCompleted(this, new getProjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void setProjectQuota(string sessionId, string projectId, long quota) {
            this.Invoke("setProjectQuota", new object[] {
                        sessionId,
                        projectId,
                        quota});
        }
        
        /// <remarks/>
        public void setProjectQuotaAsync(string sessionId, string projectId, long quota) {
            this.setProjectQuotaAsync(sessionId, projectId, quota, null);
        }
        
        /// <remarks/>
        public void setProjectQuotaAsync(string sessionId, string projectId, long quota, object userState) {
            if ((this.setProjectQuotaOperationCompleted == null)) {
                this.setProjectQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetProjectQuotaOperationCompleted);
            }
            this.InvokeAsync("setProjectQuota", new object[] {
                        sessionId,
                        projectId,
                        quota}, this.setProjectQuotaOperationCompleted, userState);
        }
        
        private void OnsetProjectQuotaOperationCompleted(object arg) {
            if ((this.setProjectQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setProjectQuotaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectQuotaReturn")]
        public long getProjectQuota(string sessionId, string projectId) {
            object[] results = this.Invoke("getProjectQuota", new object[] {
                        sessionId,
                        projectId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectQuotaAsync(string sessionId, string projectId) {
            this.getProjectQuotaAsync(sessionId, projectId, null);
        }
        
        /// <remarks/>
        public void getProjectQuotaAsync(string sessionId, string projectId, object userState) {
            if ((this.getProjectQuotaOperationCompleted == null)) {
                this.getProjectQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectQuotaOperationCompleted);
            }
            this.InvokeAsync("getProjectQuota", new object[] {
                        sessionId,
                        projectId}, this.getProjectQuotaOperationCompleted, userState);
        }
        
        private void OngetProjectQuotaOperationCompleted(object arg) {
            if ((this.getProjectQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectQuotaCompleted(this, new getProjectQuotaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectListForUserReturn")]
        public ProjectSoapList getProjectListForUser(string sessionId, string userId) {
            object[] results = this.Invoke("getProjectListForUser", new object[] {
                        sessionId,
                        userId});
            return ((ProjectSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectListForUserAsync(string sessionId, string userId) {
            this.getProjectListForUserAsync(sessionId, userId, null);
        }
        
        /// <remarks/>
        public void getProjectListForUserAsync(string sessionId, string userId, object userState) {
            if ((this.getProjectListForUserOperationCompleted == null)) {
                this.getProjectListForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectListForUserOperationCompleted);
            }
            this.InvokeAsync("getProjectListForUser", new object[] {
                        sessionId,
                        userId}, this.getProjectListForUserOperationCompleted, userState);
        }
        
        private void OngetProjectListForUserOperationCompleted(object arg) {
            if ((this.getProjectListForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectListForUserCompleted(this, new getProjectListForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void invalidateResourceBundleCache(string bundle) {
            this.Invoke("invalidateResourceBundleCache", new object[] {
                        bundle});
        }
        
        /// <remarks/>
        public void invalidateResourceBundleCacheAsync(string bundle) {
            this.invalidateResourceBundleCacheAsync(bundle, null);
        }
        
        /// <remarks/>
        public void invalidateResourceBundleCacheAsync(string bundle, object userState) {
            if ((this.invalidateResourceBundleCacheOperationCompleted == null)) {
                this.invalidateResourceBundleCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvalidateResourceBundleCacheOperationCompleted);
            }
            this.InvokeAsync("invalidateResourceBundleCache", new object[] {
                        bundle}, this.invalidateResourceBundleCacheOperationCompleted, userState);
        }
        
        private void OninvalidateResourceBundleCacheOperationCompleted(object arg) {
            if ((this.invalidateResourceBundleCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invalidateResourceBundleCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void invalidateEmailTemplate(string templateName) {
            this.Invoke("invalidateEmailTemplate", new object[] {
                        templateName});
        }
        
        /// <remarks/>
        public void invalidateEmailTemplateAsync(string templateName) {
            this.invalidateEmailTemplateAsync(templateName, null);
        }
        
        /// <remarks/>
        public void invalidateEmailTemplateAsync(string templateName, object userState) {
            if ((this.invalidateEmailTemplateOperationCompleted == null)) {
                this.invalidateEmailTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvalidateEmailTemplateOperationCompleted);
            }
            this.InvokeAsync("invalidateEmailTemplate", new object[] {
                        templateName}, this.invalidateEmailTemplateOperationCompleted, userState);
        }
        
        private void OninvalidateEmailTemplateOperationCompleted(object arg) {
            if ((this.invalidateEmailTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invalidateEmailTemplateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getGroupDataReturn")]
        public GroupSoapDO getGroupData(string sessionId, string groupId) {
            object[] results = this.Invoke("getGroupData", new object[] {
                        sessionId,
                        groupId});
            return ((GroupSoapDO)(results[0]));
        }
        
        /// <remarks/>
        public void getGroupDataAsync(string sessionId, string groupId) {
            this.getGroupDataAsync(sessionId, groupId, null);
        }
        
        /// <remarks/>
        public void getGroupDataAsync(string sessionId, string groupId, object userState) {
            if ((this.getGroupDataOperationCompleted == null)) {
                this.getGroupDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGroupDataOperationCompleted);
            }
            this.InvokeAsync("getGroupData", new object[] {
                        sessionId,
                        groupId}, this.getGroupDataOperationCompleted, userState);
        }
        
        private void OngetGroupDataOperationCompleted(object arg) {
            if ((this.getGroupDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGroupDataCompleted(this, new getGroupDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void setGroupData(string sessionId, GroupSoapDO groupData) {
            this.Invoke("setGroupData", new object[] {
                        sessionId,
                        groupData});
        }
        
        /// <remarks/>
        public void setGroupDataAsync(string sessionId, GroupSoapDO groupData) {
            this.setGroupDataAsync(sessionId, groupData, null);
        }
        
        /// <remarks/>
        public void setGroupDataAsync(string sessionId, GroupSoapDO groupData, object userState) {
            if ((this.setGroupDataOperationCompleted == null)) {
                this.setGroupDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetGroupDataOperationCompleted);
            }
            this.InvokeAsync("setGroupData", new object[] {
                        sessionId,
                        groupData}, this.setGroupDataOperationCompleted, userState);
        }
        
        private void OnsetGroupDataOperationCompleted(object arg) {
            if ((this.setGroupDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setGroupDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void deleteGroup(string sessionId, string groupId) {
            this.Invoke("deleteGroup", new object[] {
                        sessionId,
                        groupId});
        }
        
        /// <remarks/>
        public void deleteGroupAsync(string sessionId, string groupId) {
            this.deleteGroupAsync(sessionId, groupId, null);
        }
        
        /// <remarks/>
        public void deleteGroupAsync(string sessionId, string groupId, object userState) {
            if ((this.deleteGroupOperationCompleted == null)) {
                this.deleteGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteGroupOperationCompleted);
            }
            this.InvokeAsync("deleteGroup", new object[] {
                        sessionId,
                        groupId}, this.deleteGroupOperationCompleted, userState);
        }
        
        private void OndeleteGroupOperationCompleted(object arg) {
            if ((this.deleteGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void addGroupMember(string sessionId, string groupId, string userName) {
            this.Invoke("addGroupMember", new object[] {
                        sessionId,
                        groupId,
                        userName});
        }
        
        /// <remarks/>
        public void addGroupMemberAsync(string sessionId, string groupId, string userName) {
            this.addGroupMemberAsync(sessionId, groupId, userName, null);
        }
        
        /// <remarks/>
        public void addGroupMemberAsync(string sessionId, string groupId, string userName, object userState) {
            if ((this.addGroupMemberOperationCompleted == null)) {
                this.addGroupMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddGroupMemberOperationCompleted);
            }
            this.InvokeAsync("addGroupMember", new object[] {
                        sessionId,
                        groupId,
                        userName}, this.addGroupMemberOperationCompleted, userState);
        }
        
        private void OnaddGroupMemberOperationCompleted(object arg) {
            if ((this.addGroupMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addGroupMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void removeGroupMember(string sessionId, string groupId, string userName) {
            this.Invoke("removeGroupMember", new object[] {
                        sessionId,
                        groupId,
                        userName});
        }
        
        /// <remarks/>
        public void removeGroupMemberAsync(string sessionId, string groupId, string userName) {
            this.removeGroupMemberAsync(sessionId, groupId, userName, null);
        }
        
        /// <remarks/>
        public void removeGroupMemberAsync(string sessionId, string groupId, string userName, object userState) {
            if ((this.removeGroupMemberOperationCompleted == null)) {
                this.removeGroupMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveGroupMemberOperationCompleted);
            }
            this.InvokeAsync("removeGroupMember", new object[] {
                        sessionId,
                        groupId,
                        userName}, this.removeGroupMemberOperationCompleted, userState);
        }
        
        private void OnremoveGroupMemberOperationCompleted(object arg) {
            if ((this.removeGroupMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeGroupMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUserListReturn")]
        public UserSoapList getUserList(string sessionId, SoapFilter filter) {
            object[] results = this.Invoke("getUserList", new object[] {
                        sessionId,
                        filter});
            return ((UserSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getUserListAsync(string sessionId, SoapFilter filter) {
            this.getUserListAsync(sessionId, filter, null);
        }
        
        /// <remarks/>
        public void getUserListAsync(string sessionId, SoapFilter filter, object userState) {
            if ((this.getUserListOperationCompleted == null)) {
                this.getUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserListOperationCompleted);
            }
            this.InvokeAsync("getUserList", new object[] {
                        sessionId,
                        filter}, this.getUserListOperationCompleted, userState);
        }
        
        private void OngetUserListOperationCompleted(object arg) {
            if ((this.getUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserListCompleted(this, new getUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("findUsersReturn")]
        public UserSoapList findUsers(string sessionId, string queryString) {
            object[] results = this.Invoke("findUsers", new object[] {
                        sessionId,
                        queryString});
            return ((UserSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void findUsersAsync(string sessionId, string queryString) {
            this.findUsersAsync(sessionId, queryString, null);
        }
        
        /// <remarks/>
        public void findUsersAsync(string sessionId, string queryString, object userState) {
            if ((this.findUsersOperationCompleted == null)) {
                this.findUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindUsersOperationCompleted);
            }
            this.InvokeAsync("findUsers", new object[] {
                        sessionId,
                        queryString}, this.findUsersOperationCompleted, userState);
        }
        
        private void OnfindUsersOperationCompleted(object arg) {
            if ((this.findUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findUsersCompleted(this, new findUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectDiskUsageReturn")]
        public long getProjectDiskUsage(string sessionId, string projectId) {
            object[] results = this.Invoke("getProjectDiskUsage", new object[] {
                        sessionId,
                        projectId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectDiskUsageAsync(string sessionId, string projectId) {
            this.getProjectDiskUsageAsync(sessionId, projectId, null);
        }
        
        /// <remarks/>
        public void getProjectDiskUsageAsync(string sessionId, string projectId, object userState) {
            if ((this.getProjectDiskUsageOperationCompleted == null)) {
                this.getProjectDiskUsageOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectDiskUsageOperationCompleted);
            }
            this.InvokeAsync("getProjectDiskUsage", new object[] {
                        sessionId,
                        projectId}, this.getProjectDiskUsageOperationCompleted, userState);
        }
        
        private void OngetProjectDiskUsageOperationCompleted(object arg) {
            if ((this.getProjectDiskUsageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectDiskUsageCompleted(this, new getProjectDiskUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getActiveGroupMembersReturn")]
        public UserSoapList getActiveGroupMembers(string sessionId, string groupId) {
            object[] results = this.Invoke("getActiveGroupMembers", new object[] {
                        sessionId,
                        groupId});
            return ((UserSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getActiveGroupMembersAsync(string sessionId, string groupId) {
            this.getActiveGroupMembersAsync(sessionId, groupId, null);
        }
        
        /// <remarks/>
        public void getActiveGroupMembersAsync(string sessionId, string groupId, object userState) {
            if ((this.getActiveGroupMembersOperationCompleted == null)) {
                this.getActiveGroupMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetActiveGroupMembersOperationCompleted);
            }
            this.InvokeAsync("getActiveGroupMembers", new object[] {
                        sessionId,
                        groupId}, this.getActiveGroupMembersOperationCompleted, userState);
        }
        
        private void OngetActiveGroupMembersOperationCompleted(object arg) {
            if ((this.getActiveGroupMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getActiveGroupMembersCompleted(this, new getActiveGroupMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void logoff(string userName, string sessionId) {
            this.Invoke("logoff", new object[] {
                        userName,
                        sessionId});
        }
        
        /// <remarks/>
        public void logoffAsync(string userName, string sessionId) {
            this.logoffAsync(userName, sessionId, null);
        }
        
        /// <remarks/>
        public void logoffAsync(string userName, string sessionId, object userState) {
            if ((this.logoffOperationCompleted == null)) {
                this.logoffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogoffOperationCompleted);
            }
            this.InvokeAsync("logoff", new object[] {
                        userName,
                        sessionId}, this.logoffOperationCompleted, userState);
        }
        
        private void OnlogoffOperationCompleted(object arg) {
            if ((this.logoffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logoffCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("loginWithTokenReturn")]
        public string loginWithToken(string username, string oneTimeToken) {
            object[] results = this.Invoke("loginWithToken", new object[] {
                        username,
                        oneTimeToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loginWithTokenAsync(string username, string oneTimeToken) {
            this.loginWithTokenAsync(username, oneTimeToken, null);
        }
        
        /// <remarks/>
        public void loginWithTokenAsync(string username, string oneTimeToken, object userState) {
            if ((this.loginWithTokenOperationCompleted == null)) {
                this.loginWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginWithTokenOperationCompleted);
            }
            this.InvokeAsync("loginWithToken", new object[] {
                        username,
                        oneTimeToken}, this.loginWithTokenOperationCompleted, userState);
        }
        
        private void OnloginWithTokenOperationCompleted(object arg) {
            if ((this.loginWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginWithTokenCompleted(this, new loginWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getApiVersionReturn")]
        public string getApiVersion() {
            object[] results = this.Invoke("getApiVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getApiVersionAsync() {
            this.getApiVersionAsync(null);
        }
        
        /// <remarks/>
        public void getApiVersionAsync(object userState) {
            if ((this.getApiVersionOperationCompleted == null)) {
                this.getApiVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetApiVersionOperationCompleted);
            }
            this.InvokeAsync("getApiVersion", new object[0], this.getApiVersionOperationCompleted, userState);
        }
        
        private void OngetApiVersionOperationCompleted(object arg) {
            if ((this.getApiVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getApiVersionCompleted(this, new getApiVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUserProjectListReturn")]
        public ProjectSoapList getUserProjectList(string sessionId) {
            object[] results = this.Invoke("getUserProjectList", new object[] {
                        sessionId});
            return ((ProjectSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getUserProjectListAsync(string sessionId) {
            this.getUserProjectListAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void getUserProjectListAsync(string sessionId, object userState) {
            if ((this.getUserProjectListOperationCompleted == null)) {
                this.getUserProjectListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserProjectListOperationCompleted);
            }
            this.InvokeAsync("getUserProjectList", new object[] {
                        sessionId}, this.getUserProjectListOperationCompleted, userState);
        }
        
        private void OngetUserProjectListOperationCompleted(object arg) {
            if ((this.getUserProjectListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserProjectListCompleted(this, new getUserProjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("findProjectsReturn")]
        public ProjectSoapList findProjects(string sessionId, string queryString) {
            object[] results = this.Invoke("findProjects", new object[] {
                        sessionId,
                        queryString});
            return ((ProjectSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void findProjectsAsync(string sessionId, string queryString) {
            this.findProjectsAsync(sessionId, queryString, null);
        }
        
        /// <remarks/>
        public void findProjectsAsync(string sessionId, string queryString, object userState) {
            if ((this.findProjectsOperationCompleted == null)) {
                this.findProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindProjectsOperationCompleted);
            }
            this.InvokeAsync("findProjects", new object[] {
                        sessionId,
                        queryString}, this.findProjectsOperationCompleted, userState);
        }
        
        private void OnfindProjectsOperationCompleted(object arg) {
            if ((this.findProjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findProjectsCompleted(this, new findProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectMemberListReturn")]
        public ProjectMemberSoapList getProjectMemberList(string sessionId, string projectId) {
            object[] results = this.Invoke("getProjectMemberList", new object[] {
                        sessionId,
                        projectId});
            return ((ProjectMemberSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectMemberListAsync(string sessionId, string projectId) {
            this.getProjectMemberListAsync(sessionId, projectId, null);
        }
        
        /// <remarks/>
        public void getProjectMemberListAsync(string sessionId, string projectId, object userState) {
            if ((this.getProjectMemberListOperationCompleted == null)) {
                this.getProjectMemberListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectMemberListOperationCompleted);
            }
            this.InvokeAsync("getProjectMemberList", new object[] {
                        sessionId,
                        projectId}, this.getProjectMemberListOperationCompleted, userState);
        }
        
        private void OngetProjectMemberListOperationCompleted(object arg) {
            if ((this.getProjectMemberListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectMemberListCompleted(this, new getProjectMemberListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void setProjectAccessLevel(string sessionId, string projectId, int accessLevel) {
            this.Invoke("setProjectAccessLevel", new object[] {
                        sessionId,
                        projectId,
                        accessLevel});
        }
        
        /// <remarks/>
        public void setProjectAccessLevelAsync(string sessionId, string projectId, int accessLevel) {
            this.setProjectAccessLevelAsync(sessionId, projectId, accessLevel, null);
        }
        
        /// <remarks/>
        public void setProjectAccessLevelAsync(string sessionId, string projectId, int accessLevel, object userState) {
            if ((this.setProjectAccessLevelOperationCompleted == null)) {
                this.setProjectAccessLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetProjectAccessLevelOperationCompleted);
            }
            this.InvokeAsync("setProjectAccessLevel", new object[] {
                        sessionId,
                        projectId,
                        accessLevel}, this.setProjectAccessLevelOperationCompleted, userState);
        }
        
        private void OnsetProjectAccessLevelOperationCompleted(object arg) {
            if ((this.setProjectAccessLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setProjectAccessLevelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCommentListReturn")]
        public CommentSoapList getCommentList(string sessionId, string objectId) {
            object[] results = this.Invoke("getCommentList", new object[] {
                        sessionId,
                        objectId});
            return ((CommentSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getCommentListAsync(string sessionId, string objectId) {
            this.getCommentListAsync(sessionId, objectId, null);
        }
        
        /// <remarks/>
        public void getCommentListAsync(string sessionId, string objectId, object userState) {
            if ((this.getCommentListOperationCompleted == null)) {
                this.getCommentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCommentListOperationCompleted);
            }
            this.InvokeAsync("getCommentList", new object[] {
                        sessionId,
                        objectId}, this.getCommentListOperationCompleted, userState);
        }
        
        private void OngetCommentListOperationCompleted(object arg) {
            if ((this.getCommentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCommentListCompleted(this, new getCommentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void createAssociation(string sessionId, string originId, string targetId, string description) {
            this.Invoke("createAssociation", new object[] {
                        sessionId,
                        originId,
                        targetId,
                        description});
        }
        
        /// <remarks/>
        public void createAssociationAsync(string sessionId, string originId, string targetId, string description) {
            this.createAssociationAsync(sessionId, originId, targetId, description, null);
        }
        
        /// <remarks/>
        public void createAssociationAsync(string sessionId, string originId, string targetId, string description, object userState) {
            if ((this.createAssociationOperationCompleted == null)) {
                this.createAssociationOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateAssociationOperationCompleted);
            }
            this.InvokeAsync("createAssociation", new object[] {
                        sessionId,
                        originId,
                        targetId,
                        description}, this.createAssociationOperationCompleted, userState);
        }
        
        private void OncreateAssociationOperationCompleted(object arg) {
            if ((this.createAssociationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createAssociationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void deleteAssociation(string sessionId, string originId, string targetId) {
            this.Invoke("deleteAssociation", new object[] {
                        sessionId,
                        originId,
                        targetId});
        }
        
        /// <remarks/>
        public void deleteAssociationAsync(string sessionId, string originId, string targetId) {
            this.deleteAssociationAsync(sessionId, originId, targetId, null);
        }
        
        /// <remarks/>
        public void deleteAssociationAsync(string sessionId, string originId, string targetId, object userState) {
            if ((this.deleteAssociationOperationCompleted == null)) {
                this.deleteAssociationOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteAssociationOperationCompleted);
            }
            this.InvokeAsync("deleteAssociation", new object[] {
                        sessionId,
                        originId,
                        targetId}, this.deleteAssociationOperationCompleted, userState);
        }
        
        private void OndeleteAssociationOperationCompleted(object arg) {
            if ((this.deleteAssociationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteAssociationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAssociationListReturn")]
        public AssociationSoapList getAssociationList(string sessionId, string objectId) {
            object[] results = this.Invoke("getAssociationList", new object[] {
                        sessionId,
                        objectId});
            return ((AssociationSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getAssociationListAsync(string sessionId, string objectId) {
            this.getAssociationListAsync(sessionId, objectId, null);
        }
        
        /// <remarks/>
        public void getAssociationListAsync(string sessionId, string objectId, object userState) {
            if ((this.getAssociationListOperationCompleted == null)) {
                this.getAssociationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAssociationListOperationCompleted);
            }
            this.InvokeAsync("getAssociationList", new object[] {
                        sessionId,
                        objectId}, this.getAssociationListOperationCompleted, userState);
        }
        
        private void OngetAssociationListOperationCompleted(object arg) {
            if ((this.getAssociationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAssociationListCompleted(this, new getAssociationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAuditHistoryListReturn")]
        public AuditHistorySoapList getAuditHistoryList(string sessionId, string objectId) {
            object[] results = this.Invoke("getAuditHistoryList", new object[] {
                        sessionId,
                        objectId});
            return ((AuditHistorySoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getAuditHistoryListAsync(string sessionId, string objectId) {
            this.getAuditHistoryListAsync(sessionId, objectId, null);
        }
        
        /// <remarks/>
        public void getAuditHistoryListAsync(string sessionId, string objectId, object userState) {
            if ((this.getAuditHistoryListOperationCompleted == null)) {
                this.getAuditHistoryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAuditHistoryListOperationCompleted);
            }
            this.InvokeAsync("getAuditHistoryList", new object[] {
                        sessionId,
                        objectId}, this.getAuditHistoryListOperationCompleted, userState);
        }
        
        private void OngetAuditHistoryListOperationCompleted(object arg) {
            if ((this.getAuditHistoryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAuditHistoryListCompleted(this, new getAuditHistoryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        public void reindexObject(string sessionId, string objectId) {
            this.Invoke("reindexObject", new object[] {
                        sessionId,
                        objectId});
        }
        
        /// <remarks/>
        public void reindexObjectAsync(string sessionId, string objectId) {
            this.reindexObjectAsync(sessionId, objectId, null);
        }
        
        /// <remarks/>
        public void reindexObjectAsync(string sessionId, string objectId, object userState) {
            if ((this.reindexObjectOperationCompleted == null)) {
                this.reindexObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreindexObjectOperationCompleted);
            }
            this.InvokeAsync("reindexObject", new object[] {
                        sessionId,
                        objectId}, this.reindexObjectOperationCompleted, userState);
        }
        
        private void OnreindexObjectOperationCompleted(object arg) {
            if ((this.reindexObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reindexObjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("loginAnonymousReturn")]
        public string loginAnonymous(string anonSharedSecret) {
            object[] results = this.Invoke("loginAnonymous", new object[] {
                        anonSharedSecret});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loginAnonymousAsync(string anonSharedSecret) {
            this.loginAnonymousAsync(anonSharedSecret, null);
        }
        
        /// <remarks/>
        public void loginAnonymousAsync(string anonSharedSecret, object userState) {
            if ((this.loginAnonymousOperationCompleted == null)) {
                this.loginAnonymousOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginAnonymousOperationCompleted);
            }
            this.InvokeAsync("loginAnonymous", new object[] {
                        anonSharedSecret}, this.loginAnonymousOperationCompleted, userState);
        }
        
        private void OnloginAnonymousOperationCompleted(object arg) {
            if ((this.loginAnonymousCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginAnonymousCompleted(this, new loginAnonymousCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectGroupListReturn")]
        public GroupSoapList getProjectGroupList(string sessionId, string projectId) {
            object[] results = this.Invoke("getProjectGroupList", new object[] {
                        sessionId,
                        projectId});
            return ((GroupSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectGroupListAsync(string sessionId, string projectId) {
            this.getProjectGroupListAsync(sessionId, projectId, null);
        }
        
        /// <remarks/>
        public void getProjectGroupListAsync(string sessionId, string projectId, object userState) {
            if ((this.getProjectGroupListOperationCompleted == null)) {
                this.getProjectGroupListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectGroupListOperationCompleted);
            }
            this.InvokeAsync("getProjectGroupList", new object[] {
                        sessionId,
                        projectId}, this.getProjectGroupListOperationCompleted, userState);
        }
        
        private void OngetProjectGroupListOperationCompleted(object arg) {
            if ((this.getProjectGroupListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectGroupListCompleted(this, new getProjectGroupListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getGroupList2Return")]
        public Group2SoapList getGroupList2(string sessionId, SoapFilter filter) {
            object[] results = this.Invoke("getGroupList2", new object[] {
                        sessionId,
                        filter});
            return ((Group2SoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getGroupList2Async(string sessionId, SoapFilter filter) {
            this.getGroupList2Async(sessionId, filter, null);
        }
        
        /// <remarks/>
        public void getGroupList2Async(string sessionId, SoapFilter filter, object userState) {
            if ((this.getGroupList2OperationCompleted == null)) {
                this.getGroupList2OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGroupList2OperationCompleted);
            }
            this.InvokeAsync("getGroupList2", new object[] {
                        sessionId,
                        filter}, this.getGroupList2OperationCompleted, userState);
        }
        
        private void OngetGroupList2OperationCompleted(object arg) {
            if ((this.getGroupList2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGroupList2Completed(this, new getGroupList2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getGroupListReturn")]
        public GroupSoapList getGroupList(string sessionId, SoapFilter filter) {
            object[] results = this.Invoke("getGroupList", new object[] {
                        sessionId,
                        filter});
            return ((GroupSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getGroupListAsync(string sessionId, SoapFilter filter) {
            this.getGroupListAsync(sessionId, filter, null);
        }
        
        /// <remarks/>
        public void getGroupListAsync(string sessionId, SoapFilter filter, object userState) {
            if ((this.getGroupListOperationCompleted == null)) {
                this.getGroupListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGroupListOperationCompleted);
            }
            this.InvokeAsync("getGroupList", new object[] {
                        sessionId,
                        filter}, this.getGroupListOperationCompleted, userState);
        }
        
        private void OngetGroupListOperationCompleted(object arg) {
            if ((this.getGroupListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGroupListCompleted(this, new getGroupListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUserGroupListReturn")]
        public GroupSoapList getUserGroupList(string sessionId, string username) {
            object[] results = this.Invoke("getUserGroupList", new object[] {
                        sessionId,
                        username});
            return ((GroupSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void getUserGroupListAsync(string sessionId, string username) {
            this.getUserGroupListAsync(sessionId, username, null);
        }
        
        /// <remarks/>
        public void getUserGroupListAsync(string sessionId, string username, object userState) {
            if ((this.getUserGroupListOperationCompleted == null)) {
                this.getUserGroupListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserGroupListOperationCompleted);
            }
            this.InvokeAsync("getUserGroupList", new object[] {
                        sessionId,
                        username}, this.getUserGroupListOperationCompleted, userState);
        }
        
        private void OngetUserGroupListOperationCompleted(object arg) {
            if ((this.getUserGroupListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserGroupListCompleted(this, new getUserGroupListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("getConfigurationValueReturn")]
        public string getConfigurationValue(string sessionId, string keyValue) {
            object[] results = this.Invoke("getConfigurationValue", new object[] {
                        sessionId,
                        keyValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getConfigurationValueAsync(string sessionId, string keyValue) {
            this.getConfigurationValueAsync(sessionId, keyValue, null);
        }
        
        /// <remarks/>
        public void getConfigurationValueAsync(string sessionId, string keyValue, object userState) {
            if ((this.getConfigurationValueOperationCompleted == null)) {
                this.getConfigurationValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConfigurationValueOperationCompleted);
            }
            this.InvokeAsync("getConfigurationValue", new object[] {
                        sessionId,
                        keyValue}, this.getConfigurationValueOperationCompleted, userState);
        }
        
        private void OngetConfigurationValueOperationCompleted(object arg) {
            if ((this.getConfigurationValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConfigurationValueCompleted(this, new getConfigurationValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://schema.open.collab.net/sfee50/soap50/service", ResponseNamespace="http://schema.open.collab.net/sfee50/soap50/service")]
        [return: System.Xml.Serialization.SoapElementAttribute("listProjectAdminsReturn")]
        public UserSoapList listProjectAdmins(string sessionId, string projectId) {
            object[] results = this.Invoke("listProjectAdmins", new object[] {
                        sessionId,
                        projectId});
            return ((UserSoapList)(results[0]));
        }
        
        /// <remarks/>
        public void listProjectAdminsAsync(string sessionId, string projectId) {
            this.listProjectAdminsAsync(sessionId, projectId, null);
        }
        
        /// <remarks/>
        public void listProjectAdminsAsync(string sessionId, string projectId, object userState) {
            if ((this.listProjectAdminsOperationCompleted == null)) {
                this.listProjectAdminsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistProjectAdminsOperationCompleted);
            }
            this.InvokeAsync("listProjectAdmins", new object[] {
                        sessionId,
                        projectId}, this.listProjectAdminsOperationCompleted, userState);
        }
        
        private void OnlistProjectAdminsOperationCompleted(object arg) {
            if ((this.listProjectAdminsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listProjectAdminsCompleted(this, new listProjectAdminsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class GroupSoapDO : ObjectSoapDO {
        
        private string descriptionField;
        
        private string fullNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ProjectSoapDO))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(UserSoapDO))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(GroupSoapDO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public abstract partial class ObjectSoapDO {
        
        private string createdByField;
        
        private System.Nullable<System.DateTime> createdDateField;
        
        private string idField;
        
        private string lastModifiedByField;
        
        private System.Nullable<System.DateTime> lastModifiedDateField;
        
        private int versionField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> createdDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastModifiedBy {
            get {
                return this.lastModifiedByField;
            }
            set {
                this.lastModifiedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> lastModifiedDate {
            get {
                return this.lastModifiedDateField;
            }
            set {
                this.lastModifiedDateField = value;
            }
        }
        
        /// <remarks/>
        public int version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class Group2SoapRow {
        
        private string descriptionField;
        
        private string fullNameField;
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class Group2SoapList {
        
        private Group2SoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Group2SoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class GroupSoapRow {
        
        private string descriptionField;
        
        private string fullNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class GroupSoapList {
        
        private GroupSoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public GroupSoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class AuditHistorySoapRow {
        
        private string commentField;
        
        private System.Nullable<System.DateTime> dateModifiedField;
        
        private string modifiedByField;
        
        private string modifierFullNameField;
        
        private string newValueField;
        
        private string oldValueField;
        
        private string operationField;
        
        private string propertyNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> dateModified {
            get {
                return this.dateModifiedField;
            }
            set {
                this.dateModifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string modifiedBy {
            get {
                return this.modifiedByField;
            }
            set {
                this.modifiedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string modifierFullName {
            get {
                return this.modifierFullNameField;
            }
            set {
                this.modifierFullNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string newValue {
            get {
                return this.newValueField;
            }
            set {
                this.newValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string oldValue {
            get {
                return this.oldValueField;
            }
            set {
                this.oldValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string propertyName {
            get {
                return this.propertyNameField;
            }
            set {
                this.propertyNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class AuditHistorySoapList {
        
        private AuditHistorySoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public AuditHistorySoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class AssociationSoapRow {
        
        private string createdByField;
        
        private string creatorFullNameField;
        
        private System.Nullable<System.DateTime> dateCreatedField;
        
        private System.Nullable<System.DateTime> dateLastModifiedField;
        
        private string descriptionField;
        
        private string originIdField;
        
        private string originTitleField;
        
        private int originVersionField;
        
        private string targetIdField;
        
        private string targetTitleField;
        
        private int targetVersionField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string creatorFullName {
            get {
                return this.creatorFullNameField;
            }
            set {
                this.creatorFullNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> dateLastModified {
            get {
                return this.dateLastModifiedField;
            }
            set {
                this.dateLastModifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string originId {
            get {
                return this.originIdField;
            }
            set {
                this.originIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string originTitle {
            get {
                return this.originTitleField;
            }
            set {
                this.originTitleField = value;
            }
        }
        
        /// <remarks/>
        public int originVersion {
            get {
                return this.originVersionField;
            }
            set {
                this.originVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string targetId {
            get {
                return this.targetIdField;
            }
            set {
                this.targetIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string targetTitle {
            get {
                return this.targetTitleField;
            }
            set {
                this.targetTitleField = value;
            }
        }
        
        /// <remarks/>
        public int targetVersion {
            get {
                return this.targetVersionField;
            }
            set {
                this.targetVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class AssociationSoapList {
        
        private AssociationSoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public AssociationSoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class CommentSoapRow {
        
        private string createdByField;
        
        private string createdByFullnameField;
        
        private System.Nullable<System.DateTime> dateCreatedField;
        
        private string descriptionField;
        
        private string idField;
        
        private string transactionIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdByFullname {
            get {
                return this.createdByFullnameField;
            }
            set {
                this.createdByFullnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class CommentSoapList {
        
        private CommentSoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CommentSoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class ProjectMemberSoapRow {
        
        private string emailField;
        
        private string fullNameField;
        
        private string userNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class ProjectMemberSoapList {
        
        private ProjectMemberSoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public ProjectMemberSoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class UserSoapRow {
        
        private string emailField;
        
        private string fullNameField;
        
        private string statusField;
        
        private bool superUserField;
        
        private string userNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public bool superUser {
            get {
                return this.superUserField;
            }
            set {
                this.superUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class UserSoapList {
        
        private UserSoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public UserSoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class SoapFilter {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class VersionInformationSoapRow {
        
        private string idField;
        
        private bool isFolderField;
        
        private System.Nullable<System.DateTime> lastModifiedDateField;
        
        private int versionField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool isFolder {
            get {
                return this.isFolderField;
            }
            set {
                this.isFolderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> lastModifiedDate {
            get {
                return this.lastModifiedDateField;
            }
            set {
                this.lastModifiedDateField = value;
            }
        }
        
        /// <remarks/>
        public int version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class VersionInformationSoapList {
        
        private VersionInformationSoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public VersionInformationSoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class ProjectSoapRow {
        
        private System.Nullable<System.DateTime> dateCreatedField;
        
        private string descriptionField;
        
        private string idField;
        
        private string pathField;
        
        private string titleField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class ProjectSoapList {
        
        private ProjectSoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public ProjectSoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class AttachmentSoapRow {
        
        private string attachmentIdField;
        
        private System.Nullable<System.DateTime> dateCreatedField;
        
        private string fileNameField;
        
        private string fileSizeField;
        
        private string mimetypeField;
        
        private string rawFileIdField;
        
        private string storedFileIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string attachmentId {
            get {
                return this.attachmentIdField;
            }
            set {
                this.attachmentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string mimetype {
            get {
                return this.mimetypeField;
            }
            set {
                this.mimetypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string rawFileId {
            get {
                return this.rawFileIdField;
            }
            set {
                this.rawFileIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string storedFileId {
            get {
                return this.storedFileIdField;
            }
            set {
                this.storedFileIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class AttachmentSoapList {
        
        private AttachmentSoapRow[] dataRowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public AttachmentSoapRow[] dataRows {
            get {
                return this.dataRowsField;
            }
            set {
                this.dataRowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class ProjectSoapDO : ObjectSoapDO {
        
        private string descriptionField;
        
        private string pathField;
        
        private string titleField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://schema.open.collab.net/sfee50/soap50/type")]
    public partial class UserSoapDO : ObjectSoapDO {
        
        private string emailField;
        
        private string fullNameField;
        
        private string localeField;
        
        private bool restrictedUserField;
        
        private string statusField;
        
        private bool superUserField;
        
        private string timeZoneField;
        
        private string usernameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        public bool restrictedUser {
            get {
                return this.restrictedUserField;
            }
            set {
                this.restrictedUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public bool superUser {
            get {
                return this.superUserField;
            }
            set {
                this.superUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string timeZone {
            get {
                return this.timeZoneField;
            }
            set {
                this.timeZoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getVersionCompletedEventHandler(object sender, getVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createGroupCompletedEventHandler(object sender, createGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GroupSoapDO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GroupSoapDO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void setUserDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void hasPermissionCompletedEventHandler(object sender, hasPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class hasPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal hasPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserDataCompletedEventHandler(object sender, getUserDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserSoapDO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserSoapDO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void keepAliveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void loginCompletedEventHandler(object sender, loginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createUserCompletedEventHandler(object sender, createUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserSoapDO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserSoapDO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createProjectCompletedEventHandler(object sender, createProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectSoapDO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectSoapDO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createProjectFromTemplateCompletedEventHandler(object sender, createProjectFromTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createProjectFromTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createProjectFromTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectSoapDO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectSoapDO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectDataCompletedEventHandler(object sender, getProjectDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectSoapDO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectSoapDO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectAccessLevelCompletedEventHandler(object sender, getProjectAccessLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectAccessLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectAccessLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteAttachmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void listAttachmentsCompletedEventHandler(object sender, listAttachmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listAttachmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listAttachmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AttachmentSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AttachmentSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void isHostedModeCompletedEventHandler(object sender, isHostedModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isHostedModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isHostedModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void listTemplatesCompletedEventHandler(object sender, listTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteProjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addProjectMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeProjectMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getVersionInformationListCompletedEventHandler(object sender, getVersionInformationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVersionInformationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVersionInformationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VersionInformationSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VersionInformationSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectsForUserCompletedEventHandler(object sender, getProjectsForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectListCompletedEventHandler(object sender, getProjectListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void setProjectQuotaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectQuotaCompletedEventHandler(object sender, getProjectQuotaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectQuotaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectQuotaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectListForUserCompletedEventHandler(object sender, getProjectListForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectListForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectListForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void invalidateResourceBundleCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void invalidateEmailTemplateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getGroupDataCompletedEventHandler(object sender, getGroupDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGroupDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGroupDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GroupSoapDO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GroupSoapDO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void setGroupDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addGroupMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeGroupMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserListCompletedEventHandler(object sender, getUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void findUsersCompletedEventHandler(object sender, findUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectDiskUsageCompletedEventHandler(object sender, getProjectDiskUsageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectDiskUsageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectDiskUsageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getActiveGroupMembersCompletedEventHandler(object sender, getActiveGroupMembersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getActiveGroupMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getActiveGroupMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void logoffCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void loginWithTokenCompletedEventHandler(object sender, loginWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getApiVersionCompletedEventHandler(object sender, getApiVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getApiVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getApiVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserProjectListCompletedEventHandler(object sender, getUserProjectListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserProjectListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserProjectListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void findProjectsCompletedEventHandler(object sender, findProjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectMemberListCompletedEventHandler(object sender, getProjectMemberListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectMemberListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectMemberListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectMemberSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectMemberSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void setProjectAccessLevelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCommentListCompletedEventHandler(object sender, getCommentListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCommentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCommentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommentSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommentSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createAssociationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteAssociationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAssociationListCompletedEventHandler(object sender, getAssociationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAssociationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAssociationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AssociationSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AssociationSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAuditHistoryListCompletedEventHandler(object sender, getAuditHistoryListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAuditHistoryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAuditHistoryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditHistorySoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditHistorySoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void reindexObjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void loginAnonymousCompletedEventHandler(object sender, loginAnonymousCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginAnonymousCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginAnonymousCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectGroupListCompletedEventHandler(object sender, getProjectGroupListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectGroupListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectGroupListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GroupSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GroupSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getGroupList2CompletedEventHandler(object sender, getGroupList2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGroupList2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGroupList2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Group2SoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Group2SoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getGroupListCompletedEventHandler(object sender, getGroupListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGroupListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGroupListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GroupSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GroupSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserGroupListCompletedEventHandler(object sender, getUserGroupListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserGroupListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserGroupListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GroupSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GroupSoapList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getConfigurationValueCompletedEventHandler(object sender, getConfigurationValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConfigurationValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConfigurationValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void listProjectAdminsCompletedEventHandler(object sender, listProjectAdminsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listProjectAdminsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listProjectAdminsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserSoapList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserSoapList)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591